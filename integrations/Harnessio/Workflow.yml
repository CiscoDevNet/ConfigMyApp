harnessApiVersion: '1.0'
type: BUILD
notificationRules:
- conditions:
  - FAILED
  executionScope: WORKFLOW
  notificationGroupAsExpression: false
  userGroupAsExpression: false
  userGroupIds:
  - YqN5jEuwQLeE7FSQitFG9A
phases:
- daemonSet: false
  name: Phase 1
  phaseSteps:
  - type: PREPARE_STEPS
    name: Prepare Steps
    stepsInParallel: false
  - type: COLLECT_ARTIFACT
    name: Collect Artifact
    steps:
    - type: SHELL_SCRIPT
      name: Pull from git
      properties:
        commandPath: null
        connectionAttributes: null
        executeOnDelegate: true
        host: null
        outputVars: ''
        publishAsVar: false
        scriptString: "#!/bin/bash\necho \"Getting dependencies\"\napt-get -y install\
          \ git\napt-get -y install jq\necho \"Remove previous versions\"\nrm -r ConfigMyApp\n\
          git config remote.origin.url https://github.com/Appdynamics/ConfigMyApp.git\n\
          echo \"Cloning repository\" \ngit config --global credential.helper cache\n\
          git clone https://${workflow.variables.GITHUB_USER}:${workflow.variables.GITHUB_PASSWORD}@github.com/Appdynamics/ConfigMyApp.git\
          \ -b ${workflow.variables.GITHUB_BRANCH} --single-branch ConfigMyApp\necho\
          \ \"Repository cloned\""
        scriptType: BASH
        sshKeyRef: null
        sweepingOutputName: null
        sweepingOutputScope: null
        tags: null
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    - type: SHELL_SCRIPT
      name: Execute script
      properties:
        commandPath: null
        connectionAttributes: null
        executeOnDelegate: true
        host: null
        outputVars: ''
        publishAsVar: false
        scriptString: |-
          echo "Start - Execute script"
          cd ConfigMyApp
          ./start.sh -a ${workflow.variables.CMA_APPLICATION_NAME} -c ${workflow.variables.CMA_CONTROLLER_HOST} -u ${workflow.variables.CMA_USERNAME} -p ${workflow.variables.CMA_PASSWORD} --include-sim --include-database --database-name=ConfigMyApp  --overwrite-health-rules --no-configure-bt
          echo "Completed."
        scriptType: BASH
        sshKeyRef: null
        sweepingOutputName: null
        sweepingOutputScope: null
        tags: null
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    stepsInParallel: false
  - type: WRAP_UP
    name: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  statefulSet: false
tags:
  env: dev
templatized: true
userVariables:
- type: TEXT
  fixed: false
  mandatory: true
  name: CMA_CONTROLLER_HOST
  value: <controller_host_value_here>
- type: TEXT
  fixed: true
  mandatory: true
  name: CMA_USERNAME
  value: appd
- type: TEXT
  fixed: true
  mandatory: true
  name: CMA_PASSWORD
  value: appd
- type: TEXT
  fixed: false
  mandatory: true
  name: CMA_APPLICATION_NAME
  value: <application_name_value_here>
- type: TEXT
  fixed: false
  mandatory: true
  name: GITHUB_USER
  value: <user_value_here>
- type: TEXT
  fixed: false
  mandatory: true
  name: GITHUB_PASSWORD
  value: <password_value_here>
- type: TEXT
  fixed: false
  mandatory: true
  name: GITHUB_BRANCH
  value: develop
